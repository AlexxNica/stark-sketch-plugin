@import 'utils/nibui.js';
@import 'utils/checker.js';

var COSCRIPT;
var artboardId = "abid_UseWindow";

var onRun = function(context) {
  var app = NSApplication.sharedApplication();

  // Prepare the NIB so we can do stuff with the UI
  COSCRIPT = [COScript currentCOScript];
  [COSCRIPT setShouldKeepAround:true];
  var nibui = new NibUI(context, 'UIBundle', 'a11yNibUITemplate', [
    'mainWindow', 'webMainView'
  ]);

  var doc = context.document;
  var page = [doc currentPage];
  var artboards = [[doc currentPage] artboards];
  var artboardNames = "var artboardNames = [";

  for (var i = artboards.count() - 1; i >= 0; i--) {
    artboardNames += "\"" + artboards[i].name() + "\",";
  }

  artboardNames += "];"

  saveArtboardNames(context, artboardNames);

  nibui.mainWindow.setOpaque(false);

  var transparent = [NSColor colorWithDeviceRed:0.0 green:0.0 blue:0.0 alpha:0.25];
  nibui.mainWindow.setBackgroundColor(transparent);

  var localWebURL = context.plugin.urlForResourceNamed('Web/index.html');

  var request = [NSURLRequest requestWithURL:localWebURL
    cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
    timeoutInterval:60];
  nibui.webMainView.mainFrame().loadRequest(request);
  nibui.webMainView.wantsLayer = true;
  nibui.webMainView.setDrawsBackground(false);
  var webViewLayer = nibui.webMainView.layer();
  nibui.webMainView.hidden = false;

  var webUIDelegate = createCocoaObject({
    'webView:setStatusText:': function(webView, statusText) {
      log(statusText);
      if (!statusText || statusText == '') {
        return;
      } else if (statusText.startsWith("abid_")) {
        artboardId = statusText;
        if (artboardId != "abid_UseWindow") {
          for (var i = 0; i < artboards.count(); i++) {
            if (artboards[i].name() == statusText.replace("abid_", "")) {
              var filePath = "/Resources/Web/img/snapshot.png";
              var scriptPath = context.scriptPath.stringByDeletingLastPathComponent();
              scriptPath = scriptPath.stringByDeletingLastPathComponent() + filePath;

              var brains = artboards[i];
              [doc saveArtboardOrSlice:brains toFile:scriptPath];
            }
          }
        } else {
          takeSnapshot(context, nibui);
        }

        postWebFunction(nibui, "runSimulation", [""]);
      } else if (statusText == 'Check') {
        var returnValue = checkContrast(context);
        postWebFunction(nibui, "updateCheckerOutput", [returnValue]);
      } else if (statusText.startsWith("data:image")){
        var url = [NSURL URLWithString:statusText];
        var imageData = [NSData dataWithContentsOfURL:url];
        var snapshot = [[NSBitmapImageRep alloc] initWithData:imageData];

        var panel = [NSSavePanel savePanel];
        [panel setTitle:"Where?"];
        [panel setAllowsOtherFileTypes:true];
        [panel setExtensionHidden:true];
        [panel setCanCreateDirectories:true];
        [panel setNameFieldStringValue:"brains.png"];

        if ([panel runModal] == NSOKButton) {
          var message = [panel filename];
          var data = [snapshot representationUsingType:NSPNGFileType properties:nil];
          log(data)
          var filepath = message + '.png';
          var file = [NSString stringWithFormat:@"%@", filepath];
          var fileSuccess = [data writeToFile:file atomically:true];
        }
      }
    }
  });
  nibui.webMainView.setUIDelegate(webUIDelegate);

  var windowUIDelegate = createCocoaObject({
    'windowWillStartLiveResize:': function(notification) {
      if (artboardId == "abid_UseWindow") {
        postWebFunction(nibui, "removeCanvasOpacity", [""]);
      }
    },
    'windowDidEndLiveResize:': function(notification) {
      if (artboardId == "abid_UseWindow") {
        takeSnapshot(context, nibui);
        postWebFunction(nibui, "runSimulation", [""]);
      }
    },
    'windowWillMove:': function(notification) {
      if (artboardId == "abid_UseWindow") {
        postWebFunction(nibui, "removeCanvasOpacity", [""]);
      }
    },
    'windowDidMove:': function(notification) {
      if (artboardId == "abid_UseWindow") {
        takeSnapshot(context, nibui);
        postWebFunction(nibui, "runSimulation", [""]);
      }
    },
  });
  nibui.mainWindow.setDelegate(windowUIDelegate);

  // Make the window on top and keep it there
  nibui.mainWindow.makeKeyAndOrderFront(null);
  nibui.mainWindow.setLevel(NSFloatingWindowLevel);

  nibui.destroy();

  takeSnapshot(context, nibui);
}

function saveArtboardNames(context, artboards) {
  var data = [NSString stringWithFormat:@"%@", artboards];

  saveFile(context, '/Resources/Web/js/artboard-names.js', data);
}

function takeSnapshot(context, nibui) {
  var webViewFrame = nibui.webMainView.frame();
  var webViewWindow = nibui.webMainView.window();

  var screenHeight = [[NSScreen mainScreen] frame].size.height;

  var frameRelativeToScreen = [webViewWindow convertRectToScreen:webViewFrame];
  frameRelativeToScreen.size.width = frameRelativeToScreen.size.width - 220;
  frameRelativeToScreen.origin.y = screenHeight - webViewFrame.size.height - frameRelativeToScreen.origin.y;

  var quartzSnapshot = CGWindowListCreateImage(
      frameRelativeToScreen,
      kCGWindowListOptionOnScreenBelowWindow,
      webViewWindow.windowNumber(),
      kCGWindowImageBestResolution);

  var snapshot = [[NSBitmapImageRep alloc] initWithCGImage:quartzSnapshot];
  var data = [snapshot representationUsingType:NSPNGFileType properties:nil];

  saveFile(context, '/Resources/Web/img/snapshot.png', data);

  // release previous screen capture, first the NSBitmapImageRep then the CGImage
  if (snapshot != null) {
    [snapshot release];
  }
  if (quartzSnapshot != null) {
    CGImageRelease(quartzSnapshot);
  }
}

function postWebFunction(nibui, functionName, functionArguments) {
  var webView = nibui.webMainView;
  var script = webView.windowScriptObject();
  script.callWebScriptMethod_withArguments_(functionName, functionArguments);
}

function saveFile(context, filePath, data) {
  var scriptPath = context.scriptPath.stringByDeletingLastPathComponent();
  scriptPath = scriptPath.stringByDeletingLastPathComponent() + filePath;

  var file = [NSString stringWithFormat:@"%@", scriptPath];
  var fileSuccess = [data writeToFile:file atomically:true];
}
